// Prisma schema for SQLite at data/cc.db

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("PRISMA_DATABASE_URL")
}

model Project {
  id                      String   @id @db.Text
  name                    String
  description             String?  @db.Text
  status                  String   @default("idle")
  previewUrl              String?  @map("preview_url")
  previewPort             Int?     @map("preview_port")
  repoPath                String?  @map("repo_path")
  initialPrompt           String?  @map("initial_prompt") @db.Text
  templateType            String?  @map("template_type")
  activeClaudeSessionId   String?  @map("active_claude_session_id")
  activeCursorSessionId   String?  @map("active_cursor_session_id")
  preferredCli            String   @default("claude") @map("preferred_cli")
  selectedModel           String?  @map("selected_model")
  fallbackEnabled         Boolean  @default(true) @map("fallback_enabled")
  settings                Json?
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @default(now()) @map("updated_at")
  lastActiveAt            DateTime? @map("last_active_at")

  messages            Message[]
  sessions            Session[]
  toolsUsage          ToolUsage[]
  commits             Commit[]
  envVars             EnvVar[]
  serviceConnections  ProjectServiceConnection[]
  userRequests        UserRequest[]

  @@map("projects")
}

model Message {
  id               String   @id @db.Text
  projectId        String   @map("project_id")
  role             String
  messageType      String?  @map("message_type")
  content          String   @db.Text
  metadataJson     Json?    @map("metadata_json")
  parentMessageId  String?  @map("parent_message_id")
  sessionId        String?  @map("session_id")
  conversationId   String?  @map("conversation_id")
  durationMs       Int?     @map("duration_ms")
  tokenCount       Int?     @map("token_count")
  costUsd          Decimal? @db.Decimal(10, 6) @map("cost_usd")
  commitSha        String?  @map("commit_sha")
  cliSource        String?  @map("cli_source")
  createdAt        DateTime @default(now()) @map("created_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent  Message? @relation("MessageToMessage", fields: [parentMessageId], references: [id], onDelete: SetNull)
  replies Message[] @relation("MessageToMessage")
  session Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([conversationId])
  @@index([cliSource])
  @@map("messages")
}

model Session {
  id               String   @id @db.Text
  projectId        String   @map("project_id")
  claudeSessionId  String?  @map("claude_session_id")
  status           String   @default("active")
  model            String?
  cliType          String   @default("claude") @map("cli_type")
  transcriptPath   String?  @map("transcript_path")
  transcriptFormat String   @default("json") @map("transcript_format")
  instruction      String?  @db.Text
  summary          String?  @db.Text
  totalMessages    Int      @default(0) @map("total_messages")
  totalToolsUsed   Int      @default(0) @map("total_tools_used")
  totalTokens      Int      @default(0) @map("total_tokens")
  totalCostUsd     Decimal? @db.Decimal(10, 6) @map("total_cost_usd")
  durationMs       Int?     @map("duration_ms")
  startedAt        DateTime @default(now()) @map("started_at")
  completedAt      DateTime? @map("completed_at")

  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages     Message[]
  toolsUsage   ToolUsage[]
  userRequests UserRequest[]

  @@index([projectId])
  @@map("sessions")
}

model Commit {
  id          String   @id @db.Text
  projectId   String   @map("project_id")
  sessionId   String?  @map("session_id")
  commitSha   String   @unique @map("commit_sha")
  parentSha   String?  @map("parent_sha")
  message     String   @db.Text
  authorType  String?  @map("author_type")
  authorName  String?  @map("author_name")
  authorEmail String?  @map("author_email")
  filesChanged Json?   @map("files_changed")
  stats        Json?   @map("stats")
  diff         String? @db.Text
  committedAt  DateTime @default(now()) @map("committed_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([projectId])
  @@map("commits")
}

model EnvVar {
  id              String   @id @db.Text
  projectId       String   @map("project_id")
  key             String
  valueEncrypted  String   @db.Text @map("value_encrypted")
  scope           String   @default("runtime")
  varType         String   @default("string") @map("var_type")
  isSecret        Boolean  @default(true) @map("is_secret")
  description     String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, key, scope], map: "unique_project_var")
  @@index([projectId])
  @@map("env_vars")
}

model ServiceToken {
  id        String   @id @db.Text
  provider  String
  name      String
  token     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  lastUsed  DateTime? @map("last_used")

  @@index([provider])
  @@map("service_tokens")
}

model ProjectServiceConnection {
  id          String   @id @db.Text
  projectId   String
  provider    String
  status      String   @default("connected")
  serviceData Json?    @map("service_data")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  lastSyncAt  DateTime? @map("last_sync_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, provider], map: "idx_project_services")
  @@index([provider, status], map: "idx_provider_status")
  @@map("project_service_connections")
}

model ToolUsage {
  id            String   @id @db.Text
  sessionId     String   @map("session_id")
  projectId     String   @map("project_id")
  messageId     String?  @map("message_id")
  toolName      String   @map("tool_name")
  toolAction    String?  @map("tool_action")
  inputData     Json?    @map("input_data")
  outputData    Json?    @map("output_data")
  filesAffected Json?    @map("files_affected")
  linesAdded    Int?     @map("lines_added")
  linesRemoved  Int?     @map("lines_removed")
  durationMs    Int?     @map("duration_ms")
  isError       Boolean  @default(false) @map("is_error")
  errorMessage  String?  @db.Text @map("error_message")
  createdAt     DateTime @default(now()) @map("created_at")

  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  message Message? @relation(fields: [messageId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([projectId])
  @@index([toolName])
  @@map("tools_usage")
}

model UserRequest {
  id             String   @id @db.Text
  projectId      String   @map("project_id")
  userMessageId  String   @unique @map("user_message_id")
  sessionId      String?  @map("session_id")
  instruction    String   @db.Text
  requestType    String   @default("act") @map("request_type")
  isCompleted    Boolean  @default(false) @map("is_completed")
  isSuccessful   Boolean? @map("is_successful")
  resultMetadata Json?    @map("result_metadata")
  errorMessage   String?  @db.Text @map("error_message")
  cliTypeUsed    String?  @map("cli_type_used")
  modelUsed      String?  @map("model_used")
  createdAt      DateTime @default(now()) @map("created_at")
  startedAt      DateTime? @map("started_at")
  completedAt    DateTime? @map("completed_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  userMessage Message @relation(fields: [userMessageId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([sessionId])
  @@index([isCompleted])
  @@map("user_requests")
}

